1.Znajdź trasy którymi można dostać się z Darjeeling na Sandakphu, mające najmniejszą ilość etapów 

MATCH (darjeeling:town {name: "Darjeeling"}),(sandakphu:peak {name: "Sandakphu"})
WITH darjeeling, sandakphu
MATCH p = allShortestPaths((darjeeling)-[*]-(sandakphu)) 
RETURN p

2.Znajdź mające najmniej etapów trasy którymi można dostać się z Darjeeling na Sandakphu
 i które mogą być wykorzystywane zimą 


MATCH (darjeeling:town {name: "Darjeeling"}),(sandakphu:peak {name: "Sandakphu"})
WITH darjeeling, sandakphu
MATCH p = allShortestPaths((darjeeling)-[*]-(sandakphu)) 
WHERE all(r IN relationships(p) WHERE r.winter = 'true')
RETURN p

3.Uszereguj trasy którymi można dostać się z Darjeeling na Sandakphu według dystansu
 Znajdź wszystkie miejsca do których można dotrzeć przy pomocy roweru (twowheeler) z Darjeeling latem

3.1

MATCH p=(darjeeling:town {name: "Darjeeling"})-[r*1..5]->(sandakphu:peak {name: "Sandakphu"})
UNWIND r as x
WITH p, COLLECT(x.distance) AS distance
WITH p, REDUCE(totalDistance = 0, n IN distance | totalDistance + n) AS totalDistance
RETURN p, totalDistance
ORDER BY totalDistance


3.2
MATCH p= (darjeeling:town {name: "Darjeeling"})-[:twowheeler*]->(target)
WHERE all(r IN relationships(p) WHERE r.summer = 'true')
RETURN p

4.Uszereguj porty lotnicze według ilości rozpoczynających się w nich lotów

MATCH (airport:Airport) <- [:ORIGIN] - (flight:Flight)
WITH airport AS Airports, COUNT(flight) AS NrOfFlights
RETURN Airports, NrOfFlights
ORDER BY NrOfFlights

5.Znajdź wszystkie porty lotnicze, do których da się dolecieć (bezpośrednio lub z przesiadkami) z Los Angeles (LAX) wydając mniej niż 3000 

MATCH p = (airport:Airport{name: "LAX"}) <- [:ORIGIN] - (flight:Flight) - [:DESTINATION] -> (target:Airport)
WHERE REDUCE(cost = 0, n IN [x IN NODES(p) WHERE "Flight" IN LABELS(x)] |
  cost + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]
  ) < 3000
RETURN p


6.Uszereguj połączenia, którymi można dotrzeć z Los Angeles (LAX) do Dayton (DAY) według ceny biletów 
//zapytanie nie zwroci wynikow, w bazie brakuje Dayton(DAY)


MATCH p = (airport:Airport{name: "LAX"}) <- [:ORIGIN] - (flight:Flight) - [:DESTINATION] -> (target:Airport {name: "DAY"})
WITH p, REDUCE(cost = 0, n IN [x IN NODES(p) WHERE "Flight" IN LABELS(x)] |
  cost + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]
  ) AS ticketCost
RETURN p, ticketCost
ORDER BY ticketCost


7.Znajdź najtańsze połączenie z Los Angeles (LAX) do Dayton (DAY) 
//zapytanie nie zwroci wynikow, w bazie brakuje Dayton(DAY)

MATCH p = (airport:Airport{name: "LAX"}) <- [:ORIGIN] - (flight:Flight) - [:DESTINATION] -> (target:Airport {name: "DAY"})
WITH p, REDUCE(cost = 0, n IN [x IN NODES(p) WHERE "Flight" IN LABELS(x)] |
  cost + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]
  ) AS ticketCost
RETURN p, ticketCost
ORDER BY ticketCost LIMIT 1

8.Znajdź najtańsze połączenie z Los Angeles (LAX) do Dayton (DAY) w klasie biznes 
//zapytanie nie zwroci wynikow, w bazie brakuje Dayton(DAY)

MATCH p = (airport:Airport{name: "LAX"}) <- [:ORIGIN] - (flight:Flight) - [:DESTINATION] -> (target:Airport {name: "DAY"})
WITH p, REDUCE(cost = 0, n IN [x IN NODES(p) WHERE "Flight" IN LABELS(x)] |
  cost + [(n)<-[:ASSIGN]-(ticket{class: "business"}) | ticket.price][0]
  ) AS ticketCost
RETURN p, ticketCost
ORDER BY ticketCost LIMIT 1

9.Uszereguj linie lotnicze według ilości miast,
 pomiędzy którymi oferują połączenia (unikalnych miast biorących udział w relacjach
 :ORIGIN i :DESTINATION węzłów typu Flight obsługiwanych przez daną linię) 


MATCH p = (airport:Airport) <- [:ORIGIN] - (flight:Flight) - [:DESTINATION] -> (target:Airport)
WITH flight.airline as Airlines, airport.name + "_" + target.name AS pair
return Airlines, COUNT(DISTINCT pair) AS Links
ORDER BY Links



10.Znajdź najtańszą trasę łączącą 3 różne porty lotnicze


MATCH p = (airport:Airport)<-[:ORIGIN]-(flight:Flight)-[:DESTINATION]->(airport2:Airport)<-[:ORIGIN]-(flight2:Flight)-[:DESTINATION]->(target:Airport)
WHERE (airport  <> airport2) AND (airport <> target) AND (airport2 <> target)
WITH p, REDUCE(cost = 0, n IN [x IN NODES(p) WHERE "Flight" IN LABELS(x)] |
  cost + [(n)<-[:ASSIGN]-(ticket{class: "economy"}) | ticket.price][0]
  ) AS ticketCost
RETURN p, ticketCost
ORDER BY ticketCost LIMIT 1